1. Глобальные переменные:

ROOT_PRODUCTS: HTML-элемент, представляющий контейнер для отображения продуктов на веб-странице.

ROOT_HEADER: HTML-элемент, представляющий контейнер для верхней части страницы.

ROOT_STORE_CARD: HTML-элемент, представляющий контейнер для отображения корзины покупок.

ROOT_LOADER: HTML-элемент, представляющий контейнер для отображения индикатора загрузки.

ROOT_ERROR: HTML-элемент, представляющий контейнер для отображения сообщений об ошибках.

3. Класс LocalStorageUtil:

Переменные:

keyName: Строка, представляющая ключ для доступа к данным в локальном хранилище.
Методы:

Конструктор:

Инициализирует объект класса, устанавливая ключ 'products' для хранения данных в локальном хранилище.
Метод getProducts():

Получает продукты из локального хранилища по установленному ключу.
Если данные существуют, парсит их из формата JSON и возвращает массив продуктов.
Если данных нет, возвращает пустой массив.
Метод putProducts(id):

Получает идентификатор продукта в качестве параметра.
Извлекает текущий список продуктов из локального хранилища с помощью метода getProducts().
Инициализирует переменную pushProduct значением false (предполагая, что продукт не был добавлен).
Проверяет индекс продукта в текущем списке.
Если продукт с указанным идентификатором отсутствует, то добавляет его в список и устанавливает pushProduct в true.
Если продукт уже присутствует в списке, удаляет его с помощью метода splice.
Обновляет локальное хранилище с обновленным списком продуктов в формате JSON.
Возвращает объект с двумя свойствами: pushProduct (логическое значение, указывающее, был ли продукт добавлен) и products (обновленный массив продуктов).

4. Класс StoreCard:

Методы:

Метод handlerClear():

Обращается к глобальному элементу ROOT_STORE_CARD и устанавливает его содержимое в пустую строку, тем самым очищая корзину на веб-странице.
Метод render():

Получает текущий список продуктов из локального хранилища с помощью localStorageUtil.getProducts().
Инициализирует переменные htmlCatalog и sumCatalog для хранения HTML-разметки продуктов в корзине и общей стоимости покупок соответственно.
Итерирует по массиву CATALOG, проверяя, присутствует ли продукт в корзине (поиск по идентификатору). Если присутствует, формирует HTML-разметку для продукта в корзине и увеличивает сумму.
Собирает весь HTML-контейнер для корзины, включая таблицу с продуктами и общей суммой.
Обновляет содержимое элемента с идентификатором ROOT_STORE_CARD на веб-странице. 

5. Класс Header:

Методы:

Метод handlerOpenStoreCardPage():

Вызывает метод render у объекта storeCardPage, что приводит к обновлению содержимого корзины на веб-странице.
Метод render(count):

Формирует HTML-разметку для верхней части страницы, включая счетчик продуктов и кнопку для открытия корзины.
Обновляет содержимое элемента с идентификатором ROOT_HEADER на веб-странице.

6. Класс Products:

Переменные:

classNameActive: Строка, представляющая класс для стилизации продукта, добавленного в корзину.
labelAdd: Строка, представляющая текст кнопки "Добавить в корзину".
labelRemove: Строка, представляющая текст кнопки "Удалить из корзины".
Методы:

Конструктор:

Инициализирует объект класса, устанавливая класс для продукта добавленного в корзину, а также тексты
 для кнопок добавления и удаления из корзины.
Метод handlerSetLocalStorage(element, id):

Получает элемент и идентификатор продукта в качестве параметров.
Вызывает метод putProducts у объекта localStorageUtil для добавления или удаления продукта из корзины.
Обновляет отображение кнопки на веб-странице и вызывает метод render у объекта headerPage для 
обновления счетчика продуктов в верхней части страницы.
Метод render():

Получает список продуктов из локального хранилища.
Инициализирует переменную htmlCatalog для хранения HTML-разметки продуктов.
Итерирует по массиву CATALOG, формируя HTML-разметку для каждого продукта в зависимости от того, добавлен ли продукт в корзину или нет.
Обновляет содержимое контейнера продуктов на веб-странице с учетом новой HTML-разметки. 7. Инициализация данных:

Загрузка данных с сервера по адресу 'api' с использованием асинхронного запроса fetch.
После успешной загрузки данных, установка массива CATALOG.
Задержка выполнения следующих действий на 1000 миллисекунд (1 секунда) с использованием setTimeout, чтобы имитировать задержку загрузки данных.
После задержки, вызов метода handleClear у объекта loaderPage для скрытия индикатора загрузки.
Затем вызов функции render, которая обновляет интерфейс страницы с учетом загруженных данных о

function render() {
const productsStore = localStorageUtil.getProducts()

headerPage.render(productsStore.length)
productsPage.render()
}

loaderPage.render()

let CATALOG = []

fetch('api')
.then(res => res.json())
.then(data => {
CATALOG = data

    setTimeout(() => {
      spinnerPage.handleClear()
      render()
    }, 1000)

})
.catch(() => {
spinnerPage.handleClear()
errorPage.render()
})
